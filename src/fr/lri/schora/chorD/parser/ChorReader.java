/*******************************************************************************
 * This code is distributed under GPL v2 licence.
 * 
 * This code is provided solely "as is". 
 * There is no warranty or other guarantee of fitness of this code.
 * The author disclaims all responsibility and liability 
 * with respect to this code's usage
 * or its effect upon hardware or computer systems.
 * 
 * author: Huu-Nghia Nguyen
 * email : nhnghia@me.com
 ******************************************************************************/
/* Generated By:JavaCC: Do not edit this line. ChorReader.java */
package fr.lri.schora.chorD.parser;
import fr.lri.schora.chorD.*;
import fr.lri.schora.expr.*;
public class ChorReader implements ChorReaderConstants {
  Condition getCondition(Token t) throws ParseException
  {
        String str = "";
          for (int i=1; i<t.beginLine; i++)
                str += "\u005cn";
          for (int i=1; i<t.beginColumn; i++)
                str += " ";
          str += t.image;
          return _ParserTool.parser(str);
        }

  final public ChorD start() throws ParseException {
  ChorD c1, c2;
    c1 = expression_1();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
      case CHOICE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
        jj_consume_token(PARALLEL);
        c2 = expression_1();
      Parallel p = new Parallel();
      p.spec = c1;
      p.rightSpec = c2;
      c1 = p;
        break;
      case CHOICE:
        jj_consume_token(CHOICE);
        c2 = expression_1();
          Choice c = new Choice();
          c.spec = c1;
      c.rightSpec = c2;
      c1 = c;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public ChorD expression_1() throws ParseException {
  ChorD c1, c2;
    c1 = expression_2();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQUENCE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEQUENCE);
      c2 = expression_2();
      Sequence  c = new Sequence();
      c.spec = c1;
      c.rightSpec = c2;
      c1 = c;
    }
    {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public ChorD expression_2() throws ParseException {
  ChorD spec;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARAM:
      jj_consume_token(LPARAM);
      t = jj_consume_token(CONDITION);
      jj_consume_token(RPARAM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOOP:
        jj_consume_token(LOOP);
                spec = expression_3();
            Loop  c = new Loop();
        c.guard = getCondition(t);
        c.spec = spec;
        {if (true) return c;}
        break;
      case IF:
        jj_consume_token(IF);
                spec = expression_3();
            If  cc = new If();
        cc.guard = getCondition(t);
        cc.spec = spec;
        {if (true) return cc;}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case SKIPP:
    case LPAREN:
    case EVENT:
      spec = expression_3();
        {if (true) return spec;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ChorD expression_3() throws ParseException {
  ChorD c1, c2;
    c1 = expression_4();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTERRUP:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(INTERRUP);
      c2 = expression_4();
      Interruption  c = new Interruption();
      c.spec = c1;
      c.rightSpec = c2;
      c1 = c;
    }
    {if (true) return c1;}
    throw new Error("Missing return statement in function");
  }

  final public ChorD expression_4() throws ParseException {
  ChorD c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SKIPP:
    case EVENT:
      c = expression_5();
    {if (true) return c;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      c = start();
      jj_consume_token(RPAREN);
    fr.lri.schora.chorD.Bracket cc = new fr.lri.schora.chorD.Bracket();
    cc.spec = c;
    {if (true) return cc;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ChorD expression_5() throws ParseException {
  Token t;
  String str = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SKIPP:
      jj_consume_token(SKIPP);
     {if (true) return new Skip();}
      break;
    case EVENT:
      t = jj_consume_token(EVENT);
          for (int i=1; i<t.beginLine; i++)
                str += "\u005cn";
          for (int i=1; i<t.beginColumn; i++)
                str += " ";
          str += t.image;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EVENTS:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        t = jj_consume_token(EVENTS);
                str += t.image;
      }
          {if (true) return _ParserTool.parserEvent(str);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ChorReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0000,0xc0000,0x100000,0x30000,0x3c00,0x200000,0x3400,0x800000,0x2400,};
   }

  /** Constructor with InputStream. */
  public ChorReader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ChorReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ChorReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ChorReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ChorReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ChorReader(ChorReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ChorReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
