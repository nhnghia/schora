/* Generated By:JavaCC: Do not edit this line. SchoraReader.java */
package fr.lri.schora.core.parser;

import fr.lri.schora.util.parser.ParserToken;
import fr.lri.schora.define.*;
import fr.lri.schora.core.*;
import fr.lri.schora.core.cmd.*;
import java.util.*;
public class SchoraReader implements SchoraReaderConstants {

  final public MyCoraDocument document() throws ParseException {
  List<MyParserComponent > lst;
  List<Command > cmds;
    lst = components();
    cmds = commands();
    jj_consume_token(0);
          {if (true) return new MyCoraDocument(lst, cmds);}
    throw new Error("Missing return statement in function");
  }

  final public List <MyParserComponent > components() throws ParseException {
  Token type, name, text;
  List<MyParserComponent > lst = new ArrayList<MyParserComponent >();
  String spec="";
  int line, col;
  line = col = -1;
    jj_consume_token(DECLARATIONS);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPONENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMPONENT);
      name = jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHORD:
        type = jj_consume_token(CHORD);
        break;
      case STG:
        type = jj_consume_token(STG);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCRIPT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        text = jj_consume_token(SCRIPT);
              if (line == -1)
              {
                        line = text.beginLine;
                        col = text.beginColumn;
              }
              spec += text.image;
      }
      jj_consume_token(COM_END);
      lst.add(new MyParserComponent(name.image, type.image, new ParserToken(line, col, spec)));
      spec = "";
      line = -1;
    }
    {if (true) return lst;}
    throw new Error("Missing return statement in function");
  }

  final public List<Command > commands() throws ParseException {
  Token t, t2, t3;
  Command cmd;
  List<Command > cmdLst = new ArrayList<Command >();
  List<String > lst = new ArrayList<String >();
  COMMUNICATION_MODEL comod = COMMUNICATION_MODEL.SYNC;
    jj_consume_token(COMMANDS);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHOW_STG:
      case SHOW_TIME:
      case SHOW_STAT:
      case PROJECTION:
      case CONFORMANCE:
      case SHOW_REACHABLE_STG:
      case SHOW_REALIZABLE_STG:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHOW_TIME:
        t = jj_consume_token(SHOW_TIME);
                cmd = new ShowTimeCmd(t.image);
                cmdLst.add(cmd);
        break;
      case SHOW_STAT:
        t = jj_consume_token(SHOW_STAT);
        lst = getStringList();
                cmd = new ShowStatCmd(t.image);
                cmd.parameters.addAll(lst);
                cmdLst.add(cmd);
        break;
      case SHOW_STG:
        t = jj_consume_token(SHOW_STG);
        lst = getStringList();
                cmd = new ShowSTGCmd(t.image);
                cmd.parameters.addAll(lst);
                cmdLst.add(cmd);
        break;
      case SHOW_REACHABLE_STG:
        t = jj_consume_token(SHOW_REACHABLE_STG);
        lst = getStringList();
                cmd = new GetReachableSTGCmd(t.image);
                cmd.parameters.addAll(lst);
                cmdLst.add(cmd);
        break;
      case SHOW_REALIZABLE_STG:
        t = jj_consume_token(SHOW_REALIZABLE_STG);
        lst = getStringList();
        comod = getCommunicationModel();
                cmd = new GetRealizableSTGCmd(t.image);
                cmd.parameters.addAll(lst);
                (
                  (GetRealizableSTGCmd)cmd).communicationModel = comod;
                cmdLst.add(cmd);
        break;
      case PROJECTION:
        t = jj_consume_token(PROJECTION);
        lst = getStringList();
        comod = getCommunicationModel();
                ProjectionCmd pCmd = new ProjectionCmd(t.image);
                pCmd.parameters.addAll(lst);
                pCmd.communicationModel = comod;
                cmdLst.add(pCmd);
        break;
      case CONFORMANCE:
        t = jj_consume_token(CONFORMANCE);
        t2 = jj_consume_token(IDENT);
        t3 = jj_consume_token(IDENT);
                ConformanceCmd cCmd = new ConformanceCmd(t.image);
                cCmd.parameters.add(t2.image);
                cCmd.parameters.add(t3.image);
                cmdLst.add(cCmd);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return cmdLst;}
    throw new Error("Missing return statement in function");
  }

  final public List<String > getStringList() throws ParseException {
  List<String > lst = new ArrayList<String >();
  Token t;
    label_4:
    while (true) {
      t = jj_consume_token(IDENT);
            lst.add(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
    }
    {if (true) return lst;}
    throw new Error("Missing return statement in function");
  }

  final public COMMUNICATION_MODEL getCommunicationModel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNC:
      jj_consume_token(SYNC);
                    {if (true) return COMMUNICATION_MODEL.SYNC;}
      break;
    case ASYNC_SENDER:
      jj_consume_token(ASYNC_SENDER);
                            {if (true) return COMMUNICATION_MODEL.ASYNC_SENDER;}
      break;
    case ASYNC_RECEIVER:
      jj_consume_token(ASYNC_RECEIVER);
                              {if (true) return COMMUNICATION_MODEL.ASYNC_RECEIVER;}
      break;
    case ASYNC_DISJOINT:
      jj_consume_token(ASYNC_DISJOINT);
                              {if (true) return COMMUNICATION_MODEL.ASYNC_DISJOINT;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SchoraReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x3000,0x8000000,0x3f8000,0x3f8000,0x10000000,0x3c00000,};
   }

  /** Constructor with InputStream. */
  public SchoraReader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SchoraReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SchoraReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SchoraReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SchoraReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SchoraReader(SchoraReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SchoraReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
