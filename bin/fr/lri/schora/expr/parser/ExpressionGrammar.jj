
options
{
  JDK_VERSION = "1.6";
  static = false;
}
PARSER_BEGIN(ExpressionReader)
package fr.lri.symchor.expr.parser;
import fr.lri.symchor.expr.*;
import java.util.*;
public class ExpressionReader
{
}

PARSER_END(ExpressionReader)

SKIP :
{
    " "
  | "\r"
  | "\t"
  | "\n"
}
SPECIAL_TOKEN : {
    < SINGLE_LINE_COMMENT: "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? >
}

TOKEN : /*OPERATOR*/
{
  < TRUE  : ("true"|"yes") >
  | < FALSE : ("false"|"no") >
  | < RELATION_OPERATION : (">=" | ">" | "<=" | "<" | "!=" | "==" | "=") >
  | < COMPUTATION_OPERATION_1 : ("+" | "-") >
  | < COMPUTATION_OPERATION_2 : ("*" | "/") >
}
      
TOKEN :
{
    < IDENT : (["a"-"z", "_"])+ (["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "_")* >
  | < CONST : (["A"-"Z"])+ (["A"-"Z"] | ["0"-"9"] | "_")* >
  | < INT   : ("-")? ([ "0"-"9" ])+>  // (".")? ([ "0"-"9" ])*
  | < STRING :  "\"" (~["\""])* "\"" >
}

//EXPRESSION
Expression expression():
{
  Token op;
  Expression l,r;
}
{
	l = expression_1()
	(
		op = < COMPUTATION_OPERATION_1 >
		r = expression_1()
		{
			BinaryExpression rel = ExprFactory.eINSTANCE.createBinaryExpression();
			rel.setLeft(l);
			rel.setOp(op.image);
			rel.setRight(r);
			l = rel;
		}
	)*
	{
	  return l;
	}
}

Expression expression_1():
{
  Token op;
  Expression l,r;
}
{
	l = expression_2()
	(
		op = < COMPUTATION_OPERATION_2 >
		r = expression_2()
		{
			BinaryExpression rel = ExprFactory.eINSTANCE.createBinaryExpression();
			rel.setLeft(l);
			rel.setOp(op.image);
			rel.setRight(r);
			l = rel;
		}
	)*
	{
		return l;
	}
}

Expression expression_2():
{
  Token l;
  Expression ex;
  List<Variable > vars;
}
{
	l = < INT >
	{
	  	fr.lri.symchor.expr.Integer i = ExprFactory.eINSTANCE.createInteger();
	  	i.setValue(java.lang.Integer.parseInt(l.image));
		return i;
	}
|
	l = < IDENT >
	(
	  "("
	  	vars = variables()
	  ")"
	  {
	    Function f = ExprFactory.eINSTANCE.createFunction();
		f.setName(l.image);
		f.getVariables().addAll(vars);
		return f;
	  }
	)?
	{
	  	
		Variable v = ExprFactory.eINSTANCE.createVariable();
		v.setName(l.image);
		return v;
	}

|
	l = < STRING >
	{
	  	String str = l.image;
  	    str = str.substring(1, str.length()-1);
  	    
		StringValue s = ExprFactory.eINSTANCE.createStringValue();
	  	s.setValue(str);
		return s;
	}
|
	l = < CONST >
	{
	  Constance c = ExprFactory.eINSTANCE.createConstance();
	  c.setName(l.image);
	  return c;
	}
}

List<Variable > variables():
{
	List<Variable > lst = new ArrayList<Variable >();
	Token l;
}
{
 	(
		l = < IDENT >
		{
		  Variable v = ExprFactory.eINSTANCE.createVariable();
		  v.setName(l.image);
		  lst.add(v);
		}
 	)?
 	{
 	  return lst;
 	} 	
}
//CONDITION


Condition condition():
{
  Token op;
  Condition l,r;
  fr.lri.symchor.expr.Boolean b;
}
{
	l = condition2()
	(
		op = < IDENT >
		r = condition2()
		{
			BinaryCondition rel;
			if (op.image.equals("and"))
				rel = ExprFactory.eINSTANCE.createAnd();
			else if (op.image.equals("or"))
				rel = ExprFactory.eINSTANCE.createOr();
			else
				return null;
			rel.setExpr(l);
			rel.setExpr2(r);
			
			l = rel;
		}
	)*
	{
	 return l;
	}
}


Condition condition2():
{
  Token op;
  Expression l,r;
  Condition b;
}
{
	l = expression()
	(
		op = < RELATION_OPERATION >
		r = expression()
		{
			RelationalCondition rel = ExprFactory.eINSTANCE.createRelationalCondition();
			rel.setLeft(l);
			rel.setOp(op.image);
			rel.setRight(r);
			return rel;
		}
	)
	|
	b = condition3()
	{
		return b;
	}
}

Condition condition3():
{
  Condition c;
}
{
	< TRUE >
	{
	  	return ExprFactory.eINSTANCE.createBTrue();
	}
|
	< FALSE >
	{
	  	return ExprFactory.eINSTANCE.createBFalse();
	}
|
	"("
	c = condition()
	")"
	{
	  return c;
	}
}